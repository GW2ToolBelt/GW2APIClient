{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GW2APIClient","text":"<p>A Kotlin Multiplatform library for working with the official Guild Wars 2 API.</p> <p>The core library is fully written in common Kotlin code. Prebuilt binaries are available for JVM (Java 11 or later), JS, Wasm, and several native targets.<sup>1</sup></p>"},{"location":"#usage","title":"Usage","text":"<p>GW2APIClient provides low-level access to the data provided by Guild Wars 2's API. It does not provide higher-level abstractions, visualizations or analytical functionality but may be used to build such tools.</p> <p>GW2APIClient consists of two primary modules:</p>"},{"location":"#api-types","title":"API Types","text":"<p>The <code>api-types</code> module provides type-safe definitions for the objects returned by the Guild Wars 2 API. kotlinx.serialization is used for built-in support for serialization from and to JSON.</p> <p>A type definition for the <code>identity</code> field exposed by the MumbleLink mechanism is also available. Check out GW2ML for reading MumbleLink data.</p>"},{"location":"#api-client","title":"API Client","text":"<p>The <code>api-client</code> module provides definitions for the endpoints available as part of the Guild Wars 2 API.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with the API client, it is necessary to also pick an implementation module:</p> <ul> <li><code>api-client-jdk11</code> contains an implementation using Java's <code>HttpClient</code>.</li> <li><code>api-client-ktor</code> contains an implementation using Ktor.</li> </ul> <p>Once the implementation module is chosen, the API client can be built using the functions exposed by <code>JdkGw2ApiClientFactory</code> or <code>KtorGw2ApiClientFactory</code> respectively:</p> <pre><code>val client = Gw2ApiClient()\n</code></pre>"},{"location":"#implementing-caching","title":"Implementing Caching","text":"<p>To configure an API client to use a cache, a <code>CacheAccess</code> implementation can be provided when building an API client:</p> <pre><code>val client = buildGw2ApiClient {\n    cacheAccess = MyCacheAccess()\n}\n</code></pre> <p>This library does not provide a cache implementation. Thus, by default no caching is configured.</p>"},{"location":"#configuring-rate-limiting","title":"Configuring Rate Limiting","text":"<p>To configure an API client to perform client-side rate limiting, a <code>RateLimiter</code> can be provided when building an API client:</p> <pre><code>val client = buildGw2ApiClient {\n    rateLimiter = MyRateLimiter()\n}\n</code></pre> <p>By default, API clients are configured to use a <code>TokenBucketRateLimiter</code> with a bucket size of 300 and a refill duration of 1 minute. This configuration roughly matches the rate limiting behavior of the official API and should prevent requests from running into rate limits.</p> <p>However, as the same rate limit applies to all clients on a single IP address, it may be desirable to adjust the rate limiter to match the specific use case.</p>"},{"location":"#configuring-requests","title":"Configuring Requests","text":"<p>Endpoints may return localized data. For example, the <code>/v2/items</code> endpoint may return item names in different languages. By default, all requests will return English information. To request localized data for a different language, the <code>RequestCustomizer</code> may be used:</p> <pre><code>val request = gw2v2ItemsByPage(page = 0, pageSize = 10) {\n    language = Language.GERMAN\n}\n</code></pre> <p>Similarly, some endpoints require authentication and an API key has to be provided:</p> <pre><code>val request = gw2v2Account() {\n    apiKey = \"...\"\n}\n</code></pre> <p>It is also possible to apply a default configuration to all requests executed by an API client:</p> <pre><code>val client = buildGw2ApiClient {\n    configureRequests {\n        apiKey = \"...\"\n        language = Language.GERMAN\n    }\n}\n</code></pre>"},{"location":"#example","title":"Example","text":""},{"location":"#retrieving-the-build-id","title":"Retrieving the Build ID","text":"<p>The following example demonstrates how to execute a request against the Guild Wars API to retrieve the current build ID:</p> <pre><code>suspend fun main() {\n    val client = Gw2ApiClient()\n    val buildId = client.executeAsync(gw2v2Build()).dataOrNull?.id ?: error(\"Failed to fetch build ID.\")\n\n    println(\"Build ID: $buildId\")    \n}\n</code></pre>"},{"location":"#retrieving-items","title":"Retrieving Items","text":"<p>The following example demonstrates one possible way to retrieve multiple items. First, the IDs of all items are fetched. Those IDs are then chunked into groups of up to 200 IDs each (as this is the maximum number of items that can be fetched in one call). Next, requests to fetch the first 10 chunks are started asynchronously. Finally, the results are combined and printed to the console:</p> <pre><code>suspend fun main() {\n    val client = Gw2ApiClient()\n    val itemIds = client.executeAsync(gw2v2ItemsIds()).dataOrNull ?: error(\"Failed to fetch item IDs.\")\n\n    val items = coroutineScope {\n        itemIds\n            .chunked(size = 200)\n            .take(10)\n            .map { ids -&gt;\n                async { client.executeAsync(gw2v2ItemsByIds(ids)).dataOrNull }\n            }\n            .awaitAll()\n            .filterNotNull()\n            .flatten()\n    }\n\n    for (item in items) {\n        println(\"[${item.id}] ${item.name}\")\n    }\n}\n</code></pre>"},{"location":"#supported-platforms","title":"Supported platforms","text":"<p>The following targets are supported by this library:</p> Target platform Target preset Kotlin/JVM (can also be used on Android) <code>jvm</code> Kotlin/JS <code>js</code> iOS <code>iosArm64</code>, <code>iosX64</code>, <code>iosSimulatorArm64</code> watchOS <code>watchosArm32</code>, <code>watchosArm64</code>, <code>watchosX64</code>, <code>watchosSimulatorArm64</code> tvOS <code>tvosArm64</code>, <code>tvosX64</code>, <code>tvosSimulatorArm64</code> macOS <code>macosArm64</code>, <code>macosX64</code> Linux <code>linuxArm64</code>, <code>linuxX64</code> Windows <code>mingwX64</code>"},{"location":"#building-from-source","title":"Building from source","text":""},{"location":"#setup","title":"Setup","text":"<p>This project uses Gradle's toolchain support to detect and select the JDKs required to run the build. Please refer to the build scripts to find out which toolchains are requested.</p> <p>An installed JDK 1.8 (or later) is required to use Gradle.</p>"},{"location":"#generating-endpoints","title":"Generating Endpoints","text":"<p>The api-generator is used to generate the types and endpoint definitions for this library. Head over to its repository to learn more about Guild Wars 2's API.</p> <ol> <li> <p>We aim to provide prebuilt libraries for all native targets supported by Ktor. Despite that, some targets may be missing as target support may change over time. In case something is missing, please make sure to let us know.\u00a0\u21a9</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#050","title":"0.5.0","text":"<p>Released 2024 Jul 22</p>"},{"location":"changelog/#overview","title":"Overview","text":"<p>This release is a long overdue major update to the project. The entire API surface has been touched up and improved to provide a better developer experience.</p> <p>The most significant change is the decoupling of request creation from request execution:</p> <pre><code>// Old\nsuspend fun main() {\n  val client = GW2APIClient(...)\n  val requestBuilder = client.gw2v2Build()\n\n  val request = coroutineScope { requestBuilder.execute(this) }\n  val response = request.get()\n\n  val gw2v2Build = response.data.getOrNull() ?: error(\"Could not decode request\")\n\n  println(\"Build ID: ${gw2v2Build.id}\")\n}\n</code></pre> <p>Whereas the old way to create request contained a lot of ceremony to support asynchronous and synchronous execution at the same time, the new way is much more straightforward:</p> <pre><code>// New\nsuspend fun main() {\n  val client = Gw2ApiClient()\n  val gw2v2Build = client.executeAsync(gw2v2Build()).dataOrNull ?: error(\"Failed to fetch build ID.\")\n\n  println(\"Build ID: {$gw2v2Build.id}\")\n}\n</code></pre> <p>There is no full migration guide available. Please refer to the updated documentation for more information.</p>"},{"location":"changelog/#improvements","title":"Improvements","text":"<ul> <li>Added an explicit Java module descriptor for <code>api-types</code>.</li> <li>Added a simple API to allow blocking execution of requests on the JVM.</li> <li>This is especially useful in combination with virtual threads.</li> <li>Replaced placeholder exception that is thrown when an unknown type is   encountered with a <code>SerializationException</code>.</li> <li>Migrated to schema version <code>2022-03-23T19:00:00.000Z</code>.</li> </ul>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Migrated to schema version <code>2022-03-23T19:00:00.000Z</code>.</li> <li>The entire API client has been rewritten to decouple request creation from   execution. Please see the updated documentation for more information.</li> </ul>"},{"location":"changelog/#040","title":"0.4.0","text":"<p>Released 2022 Jul 27</p>"},{"location":"changelog/#improvements_1","title":"Improvements","text":"<ul> <li>Updated to api-generator to 0.6.0.</li> <li>Cleaned up caching.<ul> <li>Renamed <code>CacheAccessor</code> to <code>CacheAccess</code>.</li> <li>Cache time overwrites were removed for now.</li> </ul> </li> <li>Cleaned up the <code>RateLimiter</code> interface and related hooks.<ul> <li>A default <code>TokenBucketRateLimiter</code> implementation is now available.</li> <li>API clients are now configured to use a rate limiter by default.</li> </ul> </li> <li>Introduced the <code>DecodingResult</code> abstraction to improve error-handling   capabilities for malformed data from the API.</li> <li>Introduced the <code>ResponseHeaders</code> abstraction that wraps headers of a   <code>Response</code> and provides utilities.</li> <li>Improved documentation throughout the entire library.</li> </ul>"},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>All modules now require Kotlin 1.7</li> <li>JVM modules now require Java 11</li> <li>The library was significantly reworked and many things were either renamed or   relocated. Detailed migration guidelines are not available for this release.</li> </ul>"},{"location":"changelog/#030","title":"0.3.0","text":"<p>Released 2021 Jul 14</p>"},{"location":"changelog/#improvements_2","title":"Improvements","text":"<ul> <li>Updated to api-generator to 0.4.0.</li> <li><code>Result</code> is now used to catch exceptions during deserialization.</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<p>Released 2021 Jan 25</p>"},{"location":"changelog/#improvements_3","title":"Improvements","text":"<ul> <li>Updated to api-generator to 0.3.0.</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<p>Released 2020 Dec 24</p>"},{"location":"changelog/#overview_1","title":"Overview","text":"<p>GW2APIClient is a cross-platform client for the official Guild Wars 2 API. By leveraging Kotlin Multiplatform, GW2APIClient can be used on a large variety of platforms (including Android, the JVM, and JS) and interoperates seamlessly with various popular programming languages.</p> <p>GW2APIClient provides low-level access to the data provided by Guild Wars 2's API. It does not provide higher-level abstractions, visualizations or analytical functionality but may be used to build such tools.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to GW2APIClient!</p> <p>We welcome any type of contribution, regardless of whether it's code, documentation, or a bug report.</p> <p>Any contribution must be submitted as a pull request. (If you wish to report an issue or ask a question please use the issue tracker or discussions instead.)</p>"},{"location":"contributing/#general-guidelines","title":"General Guidelines","text":"<p>The bigger the pull request, the longer it will take to review and merge. Try to break down pull requests in smaller chunks that are logical self-contained changes.</p> <p>This project does not strictly follow any public formatting guidelines we could link here, but we ask you to stick to the formatting used when possible.</p>"},{"location":"contributing/#contributing-code","title":"Contributing Code","text":"<p>A large part of this project's source code is generated. The code generation logic resides in <code>generator</code> the directory.</p> <p>To understand the generator, it is recommended to check out the api-generator (which provides the necessary data) first.</p> <p>Keep in mind, that the handwritten code should merely serve as a framework for the generated requests.</p>"},{"location":"contributing/#contributing-endpoints","title":"Contributing Endpoints","text":"<p>Endpoints and queries are generated from the definitions provided by the api-generator. Please visit the api-generator repository and issue tracker to request/contribute changes to or additions of endpoints.</p>"},{"location":"contributing/#contributing-documentation","title":"Contributing Documentation","text":"<p>If you are contributing documentation on how to use this project, please describe why you think these improvements are necessary.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#gw2apiclient","title":"GW2APIClient","text":"<pre><code>MIT License\n\nCopyright (c) 2018-2024 Leon Linhart\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"license/#guild-wars-2","title":"Guild Wars 2","text":"<p>\u00a9 ArenaNet LLC. All rights reserved. NCSOFT, ArenaNet, Guild Wars, Guild Wars 2, GW2, Guild Wars 2: Heart of Thorns, Guild Wars 2: Path of Fire, Guild Wars 2: End of Dragons, and Guild Wars 2: Secrets of the Obscure and all associated logos, designs, and composite marks are trademarks or registered trademarks of NCSOFT Corporation.</p> <p>As taken from Guild Wars 2 Content Terms of Use on 2024-01-23 00:57 CET.</p>"}]}